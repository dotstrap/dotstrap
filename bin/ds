#!/usr/bin/env ruby

require 'thor'
require 'dotstrap'

def repo_format_desc; <<-DESC
      REPO is a GitHub repository slug in the form: `username/repository`

      If REPO is a file: read a newline seperated list of repositories (in the form specified above)
      \x5Lines starting with `#` are treated as comments and are ignored.
  DESC
end

module Dotstrap
  class Dotstrap::Cli < Thor
    # class_option "verbose", :type => :boolean, :desc => "Enable verbose output mode", :aliases => "-V"

    desc 'install REPO...', 'Download and configure REPO'
    long_desc <<-LONGDESC
      Download REPO(s) & set up the configuration file(s)
      to be loaded by the shell environment.

      #{repo_format_desc}

      Note:
        Remember to add #{Dotstrap::NAME}'s config file to your shell's startup file.
        For fish:
        \x5  `source $XDG_CONFIG_HOME/config.}`

      Examples:
        Downloads https://github.com/mkwmms/dotstrap-osx to

        relevant configure files
        \x5> #{Dotstrap::EXE_NAME} install mkwmms/dotstrap-osx

         Downloads all the repositories from the file ~/.config/repos.txt (with the
        same repo format as above; each repo on a new line)
        \x5> #{Dotstrap::EXE_NAME} install ~/.config/repos.txt
    LONGDESC
    def install(*args)
      repos = []
      args.each do |repo|
        if File.exist?(repo)
          File.open(repo).each do |line|
            repos << line.strip unless line.start_with?('#')
          end
        else
          repos << repo
        end
      end
      Dotstrap::Configuration.new(repos).configure
    end

    desc "uninstall REPO...", 'Remove specified REPO'
    long_desc <<-LONGDESC
      Removes REPO's shell configuration file(s) and lines
      from #{Dotstrap::NAME}'s config file.

      #{repo_format_desc}
    LONGDESC
    def uninstall(*args)
      repos = []
      args.each do |repo|
        if File.exist?(repo)
          File.open(repo).each do |line|
            args << line.strip unless line.start_with?('#')
          end
        else
          repos << repo
        end
      end
      Dotstrap::Configuration.new(repos).remove
    end

    desc "list [REPO...]", 'Print directory path & URL for currently installed REPO'
    long_desc <<-LONGDESC
      Print directory path & URL for currently installed REPO
      or
      print directory path & URL for all currently installed repositories
      if REPO is not specified

      #{repo_format_desc}
    LONGDESC
    def list(*args)
      repos = []
      if args.empty?
        Dotstrap::Configuration.new(Dotstrap::installed_repos).list
        return
      end

      args.each do |repo|
        if File.exist?(repo)
          File.open(repo).each do |line|
            args << line.strip unless line.start_with?('#')
          end
        else
          repos << repo
        end
      end
      Dotstrap::Configuration.new(repos).list
    end
  end
end
Dotstrap::Cli.start(ARGV)
